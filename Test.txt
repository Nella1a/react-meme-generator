import './App.css';
import { useTheme } from '@emotion/react';
// import { css } from '@emotion/react';
// import styled from '@emotion/styled';
import React, { useState } from 'react';

// import { json } from 'stream/consumers';
// import { GetMemesFromServer } from './GetImagesFromServer';

// function searchForSpecificMeme(list, search) {
//   let image;
//   if (search !== '') {
//     image = list.find((find) => find === search);
//     console.log(image);
//   }
//   return <img src={image} alt="hey" data-test-id="meme-image" />;
// }

//fetch Memes from Server
function GetMeme() {
  let memeList = [];
  fetch('https://api.memegen.link/templates')
    .then((response) => response.json())
    .then((data) => {
      memeList = data.map((event) => ({
        id: event.id,
        name: event.name,
        url: event.blank,
      }));
      // console.log(memeList);
      // console.log(typeof memeList);
    })
    .catch((error) => console.error(error));

  return null;
}

function search(toptext) {
  let memeList = [];
  fetch('https://api.memegen.link/templates')
    .then((response) => response.json())
    .then((data) => {
      memeList = data.map((event) => ({
        id: event.id,
        name: event.name,
        url: event.blank,
        styles: event.toptext,
      }));
      // console.log(memeList);
      // console.log(typeof memeList);
    })
    .catch((error) => console.error(error));

  return;
}

function GetSpecificMeme(createMeme) {
  console.log('createMeme:', createMeme);
  // createMeme = createMeme.toString();
  const [url, setUrl] = useState(
    `https://api.memegen.link/templates/${createMeme.createMeme}`,
  );
  // const url = `https://api.memegen.link/templates/${'aag'}`;
  let meme;
  let meme2;
  const regex = /\\/gi;
  const regex2 = /https([^"]+\.png)/gi;

  fetch(url)
    .then((response) => response.text())
    .then((text) => {
      console.log(typeof text);
      meme = text.replace(regex, '');
      console.log('Meme1', meme);
      meme2 = meme.match(regex2);
      setUrl(meme2[0]);
      console.log('Meme2:', meme2);
      console.log(typeof meme2);
    })
    .catch((error) => console.error(error));
  console.log(url);
  return (
    <div style={{ textAlign: 'center' }}>
      <img src={url} alt="MemeGen" data-test-id="meme-image" />
    </div>
  );
}

function RequestMeme() {
  const hello = 'ants';
  const [image, setImage] = useState('');

  const requestOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      text: hello,
      safe: true,
      redirect: true,
    }),
  };
  fetch('https://api.memegen.link/images/automatic', requestOptions)
    .then((response) => response.json())
    .then((text) => setImage(text))
    .catch((error) => console.error(error));
  console.log(image);

  return <img src={image} alt="hey34" data-test-id="meme-image" />;
}

function App() {
  const a = 'aag';
  // save and track input
  const [topText, setTopText] = useState('');
  const [botText, setBotText] = useState('');
  const [specificMeme, setSpecificMeme] = useState('');
  const [generatedMeme, setgeneratedMeme] = useState(
    'https://api.memegen.link/images/preview.jpg',
  );

  return (
    <section style={{ margin: '20px' }}>
      <h1>MEME</h1>

      <div style={{ textAlign: 'center' }}>
        <img src={generatedMeme} alt="hey" data-test-id="meme-image" />
        <img src={search(topText)} alt="hey" data-test-id="meme-image" />
      </div>
      {/* Output Bottom & Top Line */}
      <div>
        UserInput: {topText} and Bottom {botText}
      </div>
      {/* Output Top Line */}
      <div>
        <label htmlFor="Top text">Top Line</label>
        <input
          onChange={(event) => setTopText(event.target.value)}
          id="Top text"
          type="text"
        />
        {/* Output Bottom Line */}
        <label htmlFor="Bottom text">Bottom Line</label>
        <input
          onChange={(event) => setBotText(event.target.value)}
          id="Top text"
          type="text"
        />
        {/* Search for Specific Meme */}
        <label htmlFor="specificMeme">Search for Meme</label>
        <input
          value={specificMeme}
          id="specificMeme"
          onChange={(event) => {
            setSpecificMeme(event.target.value);
          }}
        />
        {/* <GetSpecificMeme createMeme={specificMeme} /> */}
        <RequestMeme />
        {/* <GetSpecificMeme createMeme={setSpecificMeme(event.target.value)} /> */}
        {/* <label htmlFor="Bottom text">Bottom Line</label>
        <input
          onChange={(event) => setBotText(event.target.value)}
          id="Top text"
          type="text"
        /> */}
        {/* Input for specific Meme */}
        {/* <label htmlFor="specificMeme">Search for Meme</label>
        <input
          onChange={(event) => setSpecificMeme(event.target.value)}
          id="specificMeme"
          type="text"
        /> */}
      </div>
      {/* <GetMeme search={specificMeme} /> */}
    </section>
  );
}

export default App;

/////////////////////////////////////////////////////////////////////////////////

import './App.css';
import React, { useEffect, useState } from 'react';

const regex = /"blank":"(https([^"]+\.png))/gi;
const regexTwo = /"blank":"/gi;

// Use fetch to get url of imgs
let arrayUrlImages = [];
const GetImagesFromServer = () => {
  const [user, setAppState] = useState({
    loading: false,
    repos: null,
  });

  useEffect(() => {
    setAppState({ loading: true });
    user = `https://api.memegen.link/templates`;
    fetch(user)
      .then((res) => res.json())
      .then((repos) => {
        setAppState({ loading: false, repos: repos });
      });
  }, [setAppState]);

  const stringTest = JSON.stringify(user); // get img-data from server

  arrayUrlImages = stringTest.match(regex) + ',';
  const arrayUrlImages2 = arrayUrlImages.replace(regexTwo, ''); // cut down string to urls
  const usingSplit = arrayUrlImages2.split(','); // Split string into array by ,
  console.log(typeof usingSplit);

  return (
    <>
      <section>
        {/* //loop over meme array */}
        {usingSplit.map((d) => (
          <img
            key="" // unique ID is missing
            src={d}
            alt=""
            style={{
              width: '100px',
              height: '100px',
              marginRight: '5px',
            }}
          />
        ))}
      </section>
      {/* <h1>STRING</h1>
      <div>ARRAYURL {arrayUrlImages}</div>
      <div>ARRAYURL {arrayUrlImages2}</div> */}
    </>
  );
};

function App() {
  return <GetImagesFromServer />;
}

export default App;
